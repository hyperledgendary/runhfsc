#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const cliffy_1 = require("cliffy");
const fabric_1 = require("./fabric");
const yargs = require("yargs");
const chalk = require("chalk");
const util = require("util");
const path = require("path");
const fs_1 = require("fs");
const pjson = fs_1.readFileSync(path.resolve(__dirname, '..', 'package.json'), 'utf-8');
const version = JSON.parse(pjson).version;
const params = yargs
    .options({
    gateway: {
        type: 'string',
        description: 'Gateway profile file',
        requiresArg: true,
        required: 'true',
    },
    wallet: {
        type: 'string',
        description: 'wallet directory path',
        requiresArg: true,
        required: 'true',
    },
    user: {
        alias: 'u',
        description: 'User wallet label',
        requiresArg: true,
        default: '',
        require: false,
    },
})
    .help()
    .wrap(null)
    .alias('v', 'version')
    .version(`ibpccl v${version}`)
    .usage('$0 --file filename')
    .help()
    .strict()
    .epilog('For usage see https://github.com/hyperledendary/runhfsc')
    .describe('v', 'show version information').argv;
const fabrics = {};
const current = 'default';
let cli;
const log = ({ msg = '>', val = '', error = false }) => {
    if (error) {
        console.log(chalk.redBright(msg) + ' ' + val);
    }
    else {
        console.log(chalk.bold(msg) + ' ' + val);
    }
};
const getPrompt = () => {
    const fabric = fabrics[current];
    if (!fabric) {
        return '[] > ';
    }
    let user = fabric.getUser();
    user = chalk.yellow(user === '' ? '<user>' : `${user}`);
    let channel = fabric.getChannel();
    channel = chalk.yellow(channel === '' ? '<channel>' : channel);
    let contractId = fabric.getContractId();
    contractId = chalk.yellow(contractId === '' ? '<contractid>' : contractId);
    const connected = fabric.getConnected() ? chalk.green('#') : chalk.gray('-');
    return chalk `{blue [${current}]} ${user}@${channel}:${contractId} ${connected} $ `;
};
const actionWrapper = (params, options, func) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        yield func(params, options);
    }
    catch (e) {
        log({ val: e.message, error: true });
    }
    cli.setDelimiter(getPrompt());
});
const main = (walletPath, connectionFile, user) => __awaiter(void 0, void 0, void 0, function* () {
    fabrics[current] = yield fabric_1.default.newFabric('default', walletPath, connectionFile);
    if (user && user !== '') {
        fabrics[current].setUser(user);
    }
    cli = new cliffy_1.CLI().setDelimiter(getPrompt());
    cli.addCommand('info', {
        description: 'Summary of the current settings',
        options: [],
        aliases: ['i'],
        parameters: [],
        action: () => {
            if (fabrics[current]) {
                log({ val: fabrics[current].getInfo() });
            }
        },
    });
    cli.addCommand('quit', {
        description: 'Quit',
        options: [],
        aliases: ['q'],
        parameters: [],
        action: () => {
            Object.values(fabrics).forEach((f) => {
                f.destroy();
            });
            process.exit(0);
        },
    });
    cli.addCommand('user', {
        description: 'Set user',
        options: [],
        aliases: ['u'],
        parameters: [{ label: 'username', description: 'User name' }],
        action: (params, _options) => __awaiter(void 0, void 0, void 0, function* () {
            fabrics[current].setUser(params.username);
            log({ msg: 'User set to', val: params.username });
            yield fabrics[current].establish();
            log({ msg: 'Connected to Fabric' });
            cli.setDelimiter(getPrompt());
        }),
    });
    cli.addCommand('channel', {
        description: 'Set channel',
        aliases: ['n'],
        options: [],
        parameters: [{ label: 'channel', description: 'Channel name' }],
        action: (params, _options) => {
            fabrics[current].setChannel(params.channel);
            log({ msg: 'Channel set to', val: params.channel });
            cli.setDelimiter(getPrompt());
        },
    });
    cli.addCommand('contract', {
        description: 'Set contract',
        aliases: ['c'],
        options: [],
        parameters: [{ label: 'contract', description: 'contract name' }],
        action: (params, _options) => {
            fabrics[current].setContractId(params.contract);
            log({ msg: 'Contract set to', val: params.contract });
            cli.setDelimiter(getPrompt());
        },
    });
    cli.addCommand('submit', {
        description: 'Submit transactions',
        aliases: ['s'],
        options: [{ label: 'json', description: 'Format output data as JSON' }],
        parameters: [
            { label: 'txname', description: 'Transaction name' },
            {
                label: 'args',
                description: 'JSON format string ',
            },
            {
                label: 'private',
                description: 'Private data map',
                optional: true,
            },
        ],
        action: (params, options) => __awaiter(void 0, void 0, void 0, function* () {
            if (!params.args) {
                params.args = '[]';
            }
            log({ msg: 'Submitted args', val: params.args });
            const args = params.args;
            const result = yield fabrics[current].submit(params.txname, args);
            if (options.json) {
                log({ val: util.inspect(JSON.parse(result), false, 6, true) });
            }
            else {
                log({ val: result });
            }
            cli.setDelimiter(getPrompt());
        }),
    });
    cli.addCommand('evaluate', {
        description: 'Evaluate transactions',
        aliases: ['e'],
        parameters: [
            { label: 'txname', description: 'Transaction name' },
            {
                label: 'args',
                description: 'JSON format string ',
            },
            {
                label: 'private',
                description: 'Private data map',
                optional: true,
            },
        ],
        options: [{ label: 'json', description: 'Format output data as JSON' }],
        action: (params, options) => __awaiter(void 0, void 0, void 0, function* () {
            if (!params.args) {
                params.args = '[]';
            }
            if (!params.args) {
                params.args = '[]';
            }
            log({ msg: 'Submitted args', val: params.args });
            const args = JSON.parse(params.args);
            const result = yield fabrics[current].evaluate(params.txname, args);
            if (options.json) {
                log({ val: util.inspect(JSON.parse(result), false, 6, true) });
            }
            else {
                log({ val: result });
            }
            cli.setDelimiter(getPrompt());
        }),
    });
    cli.addCommand('metadata', {
        description: 'Display the metadata for the current contract',
        aliases: ['m'],
        parameters: [],
        action: (_params, _options) => __awaiter(void 0, void 0, void 0, function* () {
            return actionWrapper(_params, _options, () => __awaiter(void 0, void 0, void 0, function* () {
                const result = yield fabrics[current].evaluate('org.hyperledger.fabric:GetMetadata', []);
                log({ val: util.inspect(JSON.parse(result), false, 6, true) });
                cli.setDelimiter(getPrompt());
            }));
        }),
    });
    cli.show();
});
main(params.wallet, params.gateway, params.user);
//# sourceMappingURL=data:application/json;base64,